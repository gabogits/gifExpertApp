{"version":3,"sources":["AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","menuMobileBtn","document","getElementById","onclick","classList","add","GifExpertApp","props","categories","ReactDOM","render"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAgBhD,OACE,sBAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAfhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAD,YAAU,CAC9BC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVf,kBAadM,GAbc,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACnC,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,kCAAKA,EAAL,WCDOO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjC2B,OAAQ,GACRO,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAYxC,OANAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACC,GACtBH,EAAS,CAAET,OAAQY,EAAML,SAAS,SAEnC,CAACpB,IAEGqB,EDTqBK,CAAa1B,GAAjCa,EAD+B,EAC/BA,OAAQO,EADuB,EACvBA,QAQhB,OACE,sBAAKJ,UAAU,YAAf,UACE,qBAAIA,UAAU,oCAAd,cAAoDhB,EAApD,OAECa,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,OAGvBS,GAAW,mBAAGJ,UAAU,mCAAb,qBAEZ,qBAAKA,UAAU,kBEIrB,IAAIW,EAAgBC,SAASC,eAAe,mBACxCF,IACFA,EAAcG,QAAU,WACtBF,SAASC,eAAe,oBAAoBE,UAAUC,IAAI,YAI/CC,MA9Bf,SAAsBC,GAAO,MAEShD,mBAAS,CAAC,cAFnB,mBAEpBiD,EAFoB,KAERlD,EAFQ,KAS3B,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACGkD,EAAW1B,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MChBxBoC,IAASC,OAAO,cAAC,EAAD,IAAkBT,SAASC,eAAe,W","file":"static/js/main.c767afbc.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\"); // ''\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories((cats) => [inputValue, ...cats]); //con esto llamamos el estado anterior sin necesidad de agregarlo como prop del componente\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=zO1Bb22VHYr4i9I7sCMCsd5ZwJ6Wppo2`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map((img) => ({\n    id: img.id,\n    title: img.title,\n    url: img.images?.downsized_medium.url,\n  }));\n\n  return gifs;\n};\n","import React from \"react\";\n\nexport const GifGridItem = ({ title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} />\n      <p> {title} </p>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\n\nexport const GifGrid = ({ category }) => {\n  const { images, loading } = useFetchGifs(category);\n  /*\n  useEffect(() => {\n    getGifs(category).then((imgs) => setImages(imgs));\n    //al pasar a getgifs al componente se convierte en un apromesa y de este lado se ocupa un then\n    //SE PUEDE RESUMIR A ESTO  getGifs(category).then( setImages));\n  }, [category]);\n*/\n  return (\n    <div className=\"card-grid\">\n      <h3 className=\"animate__animated animate__fadeIn\"> {category} </h3>\n\n      {images.map((img) => (\n        <GifGridItem key={img.id} {...img} />\n      ))}\n\n      {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n\n      <div className=\"card-grid\"></div>\n    </div>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    images: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) => {\n      setState({ images: imgs, loading: false });\n    });\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from \"react\";\n\nimport { AddCategory } from \"./AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nfunction GifExpertApp(props) {\n  //const categories = [\"One Punch\", \"Samurai X\", \"Dragon Ball\"];\n  const [categories, setCategories] = useState([\"one punch\"]);\n  /*\n  const handleAdd = () => {\n    // setCategories(cats => [...cats, \"Ranma 1/2\"]); igual funciona\n    setCategories([...categories, \"Ranma 1/2\"]);\n  };\n*/\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n}\n\nvar menuMobileBtn = document.getElementById(\"menu-mobile-btn\");\nif (menuMobileBtn) {\n  menuMobileBtn.onclick = function () {\n    document.getElementById(\"menu-mobile-list\").classList.add(\"active\");\n  };\n}\n\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}